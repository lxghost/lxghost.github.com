<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Head First TCP/IP | lxghost'hell]]></title>
  <link href="http://lxghost.github.com/blog/categories/head-first-tcp-ip/atom.xml" rel="self"/>
  <link href="http://lxghost.github.com/"/>
  <updated>2013-03-04T23:57:52+08:00</updated>
  <id>http://lxghost.github.com/</id>
  <author>
    <name><![CDATA[lxghost]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[地址解析协议]]></title>
    <link href="http://lxghost.github.com/blog/2012-03-24/address-resolution-protocol/"/>
    <updated>2012-03-24T23:43:00+08:00</updated>
    <id>http://lxghost.github.com/blog/2012-03-24/address-resolution-protocol</id>
    <content type="html"><![CDATA[<p>假设你叫小明(本地主机)，住在一个大院子(本地局域网)，有很多邻居(网络邻居)，门口有个看门的李大爷(网关)。当你想要找院子里的某个小朋友玩，只要大喊一声他的名字(ping),他听到了就会回你。你要找院子里的人，只要知道他家门牌号码(MAC地址)，就可以找到他。你想找外面的人，但妈妈不让你出去，必须通过李大爷帮你联系。如果你要找另一个院子里(跨域网络)的同学小强(远程主机)，他的妈妈也不让他出去。那里也有一个看门的王大爷(另一个网关)，小明要找小强，必须通过李大爷联系王大爷(路由)。这两个院子里的故事太多，以后慢慢讲。。。</p>

<!-- more -->


<p>    要理解网络协议，最好使用协议分析器对数据包进行分析，<a href="http://www.wireshark.org/download.html">wireshark</a>是不错的选择。</p>

<p><img src="../../../images/uploads/arp1.jpg">
简单的说，ARP协议回答了一个问题 IP是XX.XX.XX.XX(图中的192.168.1.1)的网卡，他的MAC/物理地址(图中的00:21:27:6a:25:0c)是什么。MAC地址是网卡绑定的唯一标识符，局域网内的主机之间互相通信，必须通过MAC地址。系统会对ARP数据进行缓存，不过10分钟后会重建。在cmd下输入arp -a可以查看。</p>

<p><img src="../../../images/uploads/arp2.jpg"><br/>
下面是ARP报文的结构</p>

<p><img src="../../../images/uploads/arp3.jpg"><br/>
ARP的过程如下，假设A,B,C为局域网的3台主机</p>

<ol>
<li>当A要访问B时，此时ARP缓存表为空，所以要进行一次广播，图中目标为全f，确定B的地址。</li>
<li>B 和C都会收到这个广播。因为是广播，所以网络上的任何一个节点都要对该帧进行进一步处理。于是C检查该帧的协议类型，发现是0x0806H(ARP协议)，便把该帧的帧头去掉，检查其IP头，发现是发向192.168.1.1 的ARP 报文而不是自己的，于是将该报文丢弃。</li>
<li>B收到这个帧后发现是个广播，所以也会检查该帧的协议类型，发现是ARP协议，便把该帧的帧头去掉，露出IP头，发现该报文是发给自己的，就再检查操作类型，发现是请求，于是便读取该帧的发送者MAC 和发送者IP，把它们作为ARP 响应的目的MAC和目的IP 发送回去，这就是为什么ARP 请求是广播，而响应是单播的原因。图中目标MAC为全0，就是留空让接受者填写。</li>
<li>当A收到来自B的ARP单播响应时，首先检查该帧的目的MAC 是不是自己，发现匹配，于是再检查协议类型，发现是ARP 协议，于是去掉二层帧头，送到IP 层，IP 协议发现目的IP地址是自己，于是进一步检查操作类型，发现是响应，于是读取发送者MAC 和IP，把它们记录进ARP缓存表。</li>
</ol>


<p>    知道了原理，我们可以通过伪造ARP响应，进行ARP欺骗，使得请求的主机相信属于别人的IP是你的。如果伪造成网关，那么别人自然不能上网了，有兴趣的同学可以慢慢研究...至于防御也很简单，本地arp -s绑定，安装arp防火墙，在路由器绑定ip-mac-端口。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[简单邮件传输协议]]></title>
    <link href="http://lxghost.github.com/blog/2012-03-09/simple-mail-transfer-protocol/"/>
    <updated>2012-03-09T20:16:00+08:00</updated>
    <id>http://lxghost.github.com/blog/2012-03-09/simple-mail-transfer-protocol</id>
    <content type="html"><![CDATA[<p>SMTP用于传播电子邮件消息，是最被滥用的协议之一了..因为年代久远 设计时并没考虑安全问题。</p>

<p>很多人用来 <a href="http://deadfake.com/Default.aspx">fake email</a></p>

<p>SMTP服务器(MTAs)负责处理发送的邮件 默认监听端口25/TCP</p>

<p>POP3服务器或IMAP服务器负责处理收到的邮件</p>

<p>使用telnet 连接SMTP服务器就可以发送电子邮件</p>

<p>使用ASCII文本进行通信 由客户端发送命令 服务端返回响应消息</p>

<!-- more -->


<p>常用命令有</p>

<p>HELO - 介绍自己
EHLO - 介绍自己并要求扩展模式
MAIL FROM - 指明发件人
RCPT TO - 指明收件人
DATA - 确认邮件内容（前三行应为To、From和邮件主题）
RSET - 重置
QUIT - 退出进程
HELP - 命令帮助
VRFY - 验证地址
EXPN - 扩展地址
比如 telnet smtp.qq.com 25</p>

<p><img src="../../../images/uploads/smtp1.jpg"></p>

<p>1.ehlo lxghost - 申明 需要身份验证</p>

<p>如果是不需要身份验证的SMTP服务器 可以用helo申明 不过网上提供的都需要验证 除非自己搭建</p>

<p>2.auth login - 开始验证</p>

<p>3.输入邮箱名和密码 需要base64编码</p>

<p>4.mai from - 这里可以输入任意的地址</p>

<p>从上图可以看出服务端进行了验证 确保定义的发件地址和认证登录的地址一样</p>

<p>但是 小型的SMTP都没有采取安全措施 像学校公司之类的都可以伪造发件人</p>

<p><img src="../../../images/uploads/smtp2.jpg"></p>

<p>5.rcpt to - 输入接收地址</p>

<p>6.data - 开始编辑</p>

<p>可以定义标题 发送地址 接受地址 内容 都是显示在邮件主体里</p>

<p>换行后一个点表示编辑结束</p>

<p>等待发送完成 quit</p>

<p>用python的smtplib实现
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>coding:utf-8&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>import smtplib&lt;br/>
</span><span class='line'>from email.mime.text import MIMEText&lt;br/>
</span><span class='line'>mail_host = "smtp地址"&lt;br/>
</span><span class='line'>mail_user = "登陆邮箱名"&lt;br/>
</span><span class='line'>mail_pwd = "登陆密码"&lt;br/>
</span><span class='line'>send_from = "想伪造的发件人&lt;br/>
</span><span class='line'>send_to = "收件人"&lt;br/>
</span><span class='line'>msg = MIMEText("内容")&lt;br/>
</span><span class='line'>msg['From'] = send_from&lt;br/>
</span><span class='line'>msg['To'] = send_to&lt;br/>
</span><span class='line'>msg['Subject'] = "title"&lt;br/>
</span><span class='line'>s = smtplib.SMTP()&lt;br/>
</span><span class='line'>s.connect(mail_host)&lt;br/>
</span><span class='line'>s.login(mail_user ,mail_pwd)&lt;br/>
</span><span class='line'>s.sendmail(send_from, send_to, msg.as_string())&lt;br/>
</span><span class='line'>s.close()</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
</feed>
